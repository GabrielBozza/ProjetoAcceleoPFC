[comment encoding = UTF-8 /]
[module generate('http://action/1.0')]

[query public className(aRule: Rule) : String = 'RadioPFC.'.concat(aRule.name.replaceAll(' ', '').toUpperFirst()) /] 

[template public generateElement(aRule : Rule) post (replaceAll('\n', '').trim()) {packageName : String = 'br.eb.ime.rules';}]
[comment @main /]
[file (aRule.name.trim().replaceAll(' ', '').toUpperFirst()+'.java', false, 'UTF-8')]
package [packageName/];

/**
 * 
 *	Class [aRule.name.toUpperFirst()/]
 * 
 **/

public class [aRule.name.replaceAll(' ', '').trim().toUpperFirst()/] {

	public static String checkMode(String CurrentMode, boolean SampleValues_ASC, boolean SampleValues_DESC, double SecLevel, double CarrierFreq, String OpRole){

		final String NewMode;

		if([loop(aRule.leftside->filter(CompoundExp))/][loop(aRule.leftside->filter(SimpleExp))/]){
			NewMode = [NewState(aRule.rightside->filter(ActionRadio))/]
			return NewMode;
		}
		else{
			return (CurrentMode + "(MANTEM MODO)");
		}
	}
}	
	
[/file]
[/template]

[template public condition(o : Operator) post (replaceAll('\n', '').trim())]
[for (c: Comparator | o->filter(Comparator)) separator('')]
[if (c.Operation.toString()='equal')] == 
[elseif (c.Operation.toString()='greater_equal')] >=
[elseif (c.Operation.toString()='greater')] >
[elseif (c.Operation.toString()='less')] <
[elseif (c.Operation.toString()='less_equal')] <= [/if]
[/for]
[for (m: Math | o->asSequence()->at(1)->filter(Math)) separator('')]
[if (m.Operation.toString()='plus')] + 
[elseif (m.Operation.toString()='minus')] -
[elseif (m.Operation.toString()='divided')] /
[elseif (m.Operation.toString()='multiplication')] *
[/if]
[/for]
[for (l: Logic | o->asSequence()->at(1)->filter(Logic)) separator('')]
[if (l.Operation.toString()='and')] &&
[elseif (l.Operation.toString()='or')] ||
[elseif (l.Operation.toString()='not')] !
[elseif (l.Operation.toString()='None')][/if]
[/for]
[/template]

[template public logicop(l : LogicOp) post (replaceAll('\n', '').replaceAll(' ','').trim())]
[if (l.toString()='and')] &&
[elseif (l.toString()='or')] ||
[elseif (l.toString()='not')] !
[elseif (l.toString()='None')][/if]
[/template]

[template public NewState(n :Set(ActionRadio)) post (replaceAll('\n', '').trim())]
"[n->asSequence()->at(1).newState/]";
[/template]

[template public SimpleExp(l: LogicOp, a :Set(Attributes),o: Operator, s:Set(Strings), n:Set(Num)) post (replaceAll('\n', '').replaceAll(' ','').trim())]
[if (s->asSequence()->at(1).value.toString().equalsIgnoreCase('invalid'))] 
[logicop(l)/]([a.name/][condition(o)/][n->asSequence()->at(1).value/])
[elseif (s->asSequence()->at(1).value.toString().equalsIgnoreCase('true') or s->asSequence()->at(1).value.toString().equalsIgnoreCase('false'))]
[logicop(l)/]([a.name/][condition(o)/][s->asSequence()->at(1).value/])
[elseif (not(s->asSequence()->at(1).value.toString().equalsIgnoreCase('true') or s->asSequence()->at(1).value.toString().equalsIgnoreCase('false')))]
[logicop(l)/]([a.name/].equalsIgnoreCase("[s->asSequence()->at(1).value.toString()/]"))
[/if]
[/template]

[template public CompoundExp(c : CompoundExp) post (replaceAll('\n', '').replaceAll(' ','').trim())]
[logicop(c.PrecedingLogicOp)/](
[for (simpleExp: SimpleExp | c.expression->filter(SimpleExp)) separator('')]
[SimpleExp(simpleExp.PrecedingLogicOp,simpleExp.operand->filter(Attributes),simpleExp.operator,simpleExp.operand->filter(Strings),simpleExp.operand->filter(Num))/]
[/for]
[for (compoundExp: CompoundExp | c.expression->filter(CompoundExp)) separator('')]
[CompoundExp(compoundExp)/]
[/for])
[/template]

[template public loop(c : Set(CompoundExp)) post (replaceAll('\n', '').replaceAll(' ','').trim())]
[for (exp: CompoundExp | c ) separator('')][CompoundExp(exp)/][/for]
[/template]

[template public loop(s : Set(SimpleExp)) post (replaceAll('\n', '').replaceAll(' ','').trim())]
[for (simpleExp: SimpleExp | s ) separator('')]
[SimpleExp(simpleExp.PrecedingLogicOp,simpleExp.operand->filter(Attributes),simpleExp.operator,simpleExp.operand->filter(Strings),simpleExp.operand->filter(Num))/]
[/for]
[/template]